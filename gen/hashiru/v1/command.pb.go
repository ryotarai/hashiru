// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: hashiru/v1/command.proto

package hashiruv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunCommandRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Args          []string               `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Env           []string               `protobuf:"bytes,3,rep,name=env,proto3" json:"env,omitempty"`
	Dir           string                 `protobuf:"bytes,4,opt,name=dir,proto3" json:"dir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunCommandRequest) Reset() {
	*x = RunCommandRequest{}
	mi := &file_hashiru_v1_command_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCommandRequest) ProtoMessage() {}

func (x *RunCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hashiru_v1_command_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCommandRequest.ProtoReflect.Descriptor instead.
func (*RunCommandRequest) Descriptor() ([]byte, []int) {
	return file_hashiru_v1_command_proto_rawDescGZIP(), []int{0}
}

func (x *RunCommandRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RunCommandRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *RunCommandRequest) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *RunCommandRequest) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

type RunCommandResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*RunCommandResponse_Stdout
	//	*RunCommandResponse_Stderr
	//	*RunCommandResponse_ExitCode
	Result        isRunCommandResponse_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunCommandResponse) Reset() {
	*x = RunCommandResponse{}
	mi := &file_hashiru_v1_command_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCommandResponse) ProtoMessage() {}

func (x *RunCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hashiru_v1_command_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCommandResponse.ProtoReflect.Descriptor instead.
func (*RunCommandResponse) Descriptor() ([]byte, []int) {
	return file_hashiru_v1_command_proto_rawDescGZIP(), []int{1}
}

func (x *RunCommandResponse) GetResult() isRunCommandResponse_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RunCommandResponse) GetStdout() []byte {
	if x != nil {
		if x, ok := x.Result.(*RunCommandResponse_Stdout); ok {
			return x.Stdout
		}
	}
	return nil
}

func (x *RunCommandResponse) GetStderr() []byte {
	if x != nil {
		if x, ok := x.Result.(*RunCommandResponse_Stderr); ok {
			return x.Stderr
		}
	}
	return nil
}

func (x *RunCommandResponse) GetExitCode() int64 {
	if x != nil {
		if x, ok := x.Result.(*RunCommandResponse_ExitCode); ok {
			return x.ExitCode
		}
	}
	return 0
}

type isRunCommandResponse_Result interface {
	isRunCommandResponse_Result()
}

type RunCommandResponse_Stdout struct {
	Stdout []byte `protobuf:"bytes,1,opt,name=stdout,proto3,oneof"`
}

type RunCommandResponse_Stderr struct {
	Stderr []byte `protobuf:"bytes,2,opt,name=stderr,proto3,oneof"`
}

type RunCommandResponse_ExitCode struct {
	ExitCode int64 `protobuf:"varint,3,opt,name=exit_code,json=exitCode,proto3,oneof"`
}

func (*RunCommandResponse_Stdout) isRunCommandResponse_Result() {}

func (*RunCommandResponse_Stderr) isRunCommandResponse_Result() {}

func (*RunCommandResponse_ExitCode) isRunCommandResponse_Result() {}

var File_hashiru_v1_command_proto protoreflect.FileDescriptor

const file_hashiru_v1_command_proto_rawDesc = "" +
	"\n" +
	"\x18hashiru/v1/command.proto\x12\n" +
	"hashiru.v1\"_\n" +
	"\x11RunCommandRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04args\x18\x02 \x03(\tR\x04args\x12\x10\n" +
	"\x03env\x18\x03 \x03(\tR\x03env\x12\x10\n" +
	"\x03dir\x18\x04 \x01(\tR\x03dir\"q\n" +
	"\x12RunCommandResponse\x12\x18\n" +
	"\x06stdout\x18\x01 \x01(\fH\x00R\x06stdout\x12\x18\n" +
	"\x06stderr\x18\x02 \x01(\fH\x00R\x06stderr\x12\x1d\n" +
	"\texit_code\x18\x03 \x01(\x03H\x00R\bexitCodeB\b\n" +
	"\x06result2a\n" +
	"\x0eCommandService\x12O\n" +
	"\n" +
	"RunCommand\x12\x1d.hashiru.v1.RunCommandRequest\x1a\x1e.hashiru.v1.RunCommandResponse\"\x000\x01B6Z4github.com/ryotarai/hashiru/gen/hashiru/v1;hashiruv1b\x06proto3"

var (
	file_hashiru_v1_command_proto_rawDescOnce sync.Once
	file_hashiru_v1_command_proto_rawDescData []byte
)

func file_hashiru_v1_command_proto_rawDescGZIP() []byte {
	file_hashiru_v1_command_proto_rawDescOnce.Do(func() {
		file_hashiru_v1_command_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_hashiru_v1_command_proto_rawDesc), len(file_hashiru_v1_command_proto_rawDesc)))
	})
	return file_hashiru_v1_command_proto_rawDescData
}

var file_hashiru_v1_command_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_hashiru_v1_command_proto_goTypes = []any{
	(*RunCommandRequest)(nil),  // 0: hashiru.v1.RunCommandRequest
	(*RunCommandResponse)(nil), // 1: hashiru.v1.RunCommandResponse
}
var file_hashiru_v1_command_proto_depIdxs = []int32{
	0, // 0: hashiru.v1.CommandService.RunCommand:input_type -> hashiru.v1.RunCommandRequest
	1, // 1: hashiru.v1.CommandService.RunCommand:output_type -> hashiru.v1.RunCommandResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_hashiru_v1_command_proto_init() }
func file_hashiru_v1_command_proto_init() {
	if File_hashiru_v1_command_proto != nil {
		return
	}
	file_hashiru_v1_command_proto_msgTypes[1].OneofWrappers = []any{
		(*RunCommandResponse_Stdout)(nil),
		(*RunCommandResponse_Stderr)(nil),
		(*RunCommandResponse_ExitCode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_hashiru_v1_command_proto_rawDesc), len(file_hashiru_v1_command_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hashiru_v1_command_proto_goTypes,
		DependencyIndexes: file_hashiru_v1_command_proto_depIdxs,
		MessageInfos:      file_hashiru_v1_command_proto_msgTypes,
	}.Build()
	File_hashiru_v1_command_proto = out.File
	file_hashiru_v1_command_proto_goTypes = nil
	file_hashiru_v1_command_proto_depIdxs = nil
}
