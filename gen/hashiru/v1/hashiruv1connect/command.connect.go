// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: hashiru/v1/command.proto

package hashiruv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ryotarai/hashiru/gen/hashiru/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CommandServiceName is the fully-qualified name of the CommandService service.
	CommandServiceName = "hashiru.v1.CommandService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CommandServiceRunCommandProcedure is the fully-qualified name of the CommandService's RunCommand
	// RPC.
	CommandServiceRunCommandProcedure = "/hashiru.v1.CommandService/RunCommand"
)

// CommandServiceClient is a client for the hashiru.v1.CommandService service.
type CommandServiceClient interface {
	RunCommand(context.Context, *connect.Request[v1.RunCommandRequest]) (*connect.ServerStreamForClient[v1.RunCommandResponse], error)
}

// NewCommandServiceClient constructs a client for the hashiru.v1.CommandService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCommandServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CommandServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	commandServiceMethods := v1.File_hashiru_v1_command_proto.Services().ByName("CommandService").Methods()
	return &commandServiceClient{
		runCommand: connect.NewClient[v1.RunCommandRequest, v1.RunCommandResponse](
			httpClient,
			baseURL+CommandServiceRunCommandProcedure,
			connect.WithSchema(commandServiceMethods.ByName("RunCommand")),
			connect.WithClientOptions(opts...),
		),
	}
}

// commandServiceClient implements CommandServiceClient.
type commandServiceClient struct {
	runCommand *connect.Client[v1.RunCommandRequest, v1.RunCommandResponse]
}

// RunCommand calls hashiru.v1.CommandService.RunCommand.
func (c *commandServiceClient) RunCommand(ctx context.Context, req *connect.Request[v1.RunCommandRequest]) (*connect.ServerStreamForClient[v1.RunCommandResponse], error) {
	return c.runCommand.CallServerStream(ctx, req)
}

// CommandServiceHandler is an implementation of the hashiru.v1.CommandService service.
type CommandServiceHandler interface {
	RunCommand(context.Context, *connect.Request[v1.RunCommandRequest], *connect.ServerStream[v1.RunCommandResponse]) error
}

// NewCommandServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCommandServiceHandler(svc CommandServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	commandServiceMethods := v1.File_hashiru_v1_command_proto.Services().ByName("CommandService").Methods()
	commandServiceRunCommandHandler := connect.NewServerStreamHandler(
		CommandServiceRunCommandProcedure,
		svc.RunCommand,
		connect.WithSchema(commandServiceMethods.ByName("RunCommand")),
		connect.WithHandlerOptions(opts...),
	)
	return "/hashiru.v1.CommandService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CommandServiceRunCommandProcedure:
			commandServiceRunCommandHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCommandServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCommandServiceHandler struct{}

func (UnimplementedCommandServiceHandler) RunCommand(context.Context, *connect.Request[v1.RunCommandRequest], *connect.ServerStream[v1.RunCommandResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("hashiru.v1.CommandService.RunCommand is not implemented"))
}
